# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NybPCmhM_10cNV00Ld36_2JsHn1cvN1O
"""

from google.colab.patches import cv2_imshow
import numpy as np
import cv2

def rgb_to_gray(image):
    # Convert the image to float32
    img_float = image.astype(np.float32)

    # Calculate the luminance (Y) using the formula Y = 0.299*R + 0.587*G + 0.114*B
    gray = 0.299 * img_float[:,:,2] + 0.587 * img_float[:,:,1] + 0.114 * img_float[:,:,0]

    # Normalize the output image to [0, 255]
    gray = np.uint8(gray)

    return gray

def dct_2d(image):
    # Apply 2D DCT on the image
 return cv2.dct(cv2.dct(np.float32(image.T).T))

def idct_2d(coefficients):
    # Apply inverse 2D DCT on the coefficients
    return cv2.idct(cv2.idct(coefficients.T).T)

def convert_to_grayscale_dct_fft(image):
    # Convert the image to grayscale
    gray_image = rgb_to_gray(image)

    # Display the grayscale image
    cv2_imshow(gray_image)

    # Apply 2D DCT on the grayscale image
    dct_coefficients = dct_2d(gray_image)

    # Set the high-frequency components to zero (keeping only low-frequency components)
    dct_coefficients[:, 8:] = 0
    dct_coefficients[8:, :] = 0




  # Apply inverse 2D DCT to get the grayscale image with low-frequency components
    grayscale_low_freq = idct_2d(dct_coefficients)

    # Normalize the output image
    grayscale_low_freq = cv2.normalize(grayscale_low_freq, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_8U)

    return grayscale_low_freq

# Load the image
image = cv2.imread('input_image3.jpg')

# Display the original image
cv2_imshow(image)

# Convert the image to grayscale using DCT with FFT
gray_image_dct_fft = convert_to_grayscale_dct_fft(image)

# Display the grayscale image
cv2_imshow(gray_image_dct_fft)